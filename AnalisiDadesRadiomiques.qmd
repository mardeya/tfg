---
title: "analisi dades radiomiques"
format: html
editor: visual
---

## Paquets necessaris

Primer de tot carregam tots el paquets necessaris i carregam el color propi de la memòria del TFG.

```{r}
library(glmnet)
library(dplyr)
library(readxl)
library(ggplot2)
library(factoextra)
library(pls)

colorTFG <- rgb(91, 200, 145, maxColorValue = 250)
```

## Lectura de la base de dades

A continuació, llegim els csv pertinents:

```{r}
radiomica <- read.csv("radiomica_data_processed.csv")
#str(clinical)

radiomica_train <- read.csv("radiomica_data_processed_train.csv")
#str(clinical_train)

radiomica_test <- read.csv("radiomica_data_processed_test.csv")
#str(clinical_test)
```

## Funcions útils

Funció que calcula el MSE:

```{r}
mse <- function(real, prediccio) {
  return(mean((real - prediccio)^2))
}
```

Funció que calcula el $R^2$:

```{r}
r_squared <- function(actual, predicted) {
  
  ss_residual <- sum((actual - predicted)^2)
  ss_total <- sum((actual - mean(actual))^2)
  
  return(1 - (ss_residual / ss_total))
}
```

## Model baseline

Realitzarem un model de referència que no utilitza cap variable amb l'objectiu de poder comparar-lo en el futur amb els nous models entrenats

```{r}
radiomica_train_resposta <- radiomica_train$OS
radiomica_test_resposta <- radiomica_test$OS 
radiomica_test_id <- radiomica_test$Patient
```

Calculam la mitjana de l'*OS* dels pacients inclosos en el connjunt d'entrenament.

```{r}
prediccio = mean(radiomica_train_resposta)
prediccio
```

Per tant, la predicció és $125.7776$ setmanes.

```{r}

r2_base <- r_squared(radiomica_test_resposta, prediccio)
r2_base

mse_base <- mse(radiomica_test_resposta, prediccio)
mse_base
```

## Regressió lineal

Realitzarem tres regressions lineals, cada una amb un mètode diferent per a afrontar el problema de grans dimensions

### Selecció de variables

Eliminam la variable que és la clau primària:

```{r}

radiomica_test <- radiomica_test %>% select(-Patient)
radiomica_train <- radiomica_train %>% select(-Patient)
```

Model base sense cap variable:

```{r}
rl_step <- lm(OS ~ 1 , data = radiomica_train)

summary(rl_step)
```


```{r}
rl_step <- step(rl_step, direction = "both")
summary(rl_step)
```
### PCA

A n'aquest apartat realitzarem un anàlisi de components principals i la posterior 
regressió.

Ens agafam les cinc primeres dimensions ja que agrupen el 80% de la variança.

```{r}
pcr.regression <- pcr(OS ~., data =  radiomica_train, scale = TRUE, validation = "CV") 
summary(pcr.regression)
```

```{r}
validationplot(pcr.regression, val.type = "MSEP")
```


Elegirem aleshores 6 components

```{r}
pcr.fit <- pcr(OS ~., data = radiomica_train , scale = TRUE, ncomp = 6)
summary(pcr.fit)
```
```{r}
pcr.pred <- predict(pcr.fit, radiomica_test, ncomp = 6)
pcr.pred[,,]
```

```{r}
mse(pcr.pred, radiomica_test$OS)
r_squared(pcr.pred, radiomica_test$OS)
```

```{r}
explained_variance <- explvar(pcr.regression)[0:10]
```



```{r}
components_df <- data.frame(
  Component = seq_along(explained_variance),
  VarianceExplained = explained_variance
)

# Gráfico de codo
ggplot(components_df, aes(x = Component)) +
  geom_bar(aes(y = VarianceExplained), stat = "identity", fill = colorTFG) +
  geom_line(aes(y = VarianceExplained, group = 1), color = "red") +
  geom_point(aes(y = VarianceExplained), color = "red") +
  geom_text(aes(y = VarianceExplained, label = sprintf("%.1f%%", VarianceExplained)), 
            vjust = -0.5, size = 3) +
  scale_x_continuous(breaks = seq_along(explained_variance)) +
  labs(title = "Scree plot",
       x = "Componentes Principales",
       y = "Varianza Explicada (%)") +
  theme_minimal()
```

### Anàlisi de la col·linealitat

```{r}

corr_matrix <- cor(radiomica_data_quant)

high_corr <- which(abs(corr_matrix) > 0.75 & upper.tri(corr_matrix), arr.ind = TRUE)

var_counts <- table(c(rownames(corr_matrix)[high_corr[,1]], colnames(corr_matrix)[high_corr[,2]]))

for (i in 1:nrow(high_corr)) {
  var1 <- rownames(corr_matrix)[high_corr[i, 1]]
  var2 <- colnames(corr_matrix)[high_corr[i, 2]]
  if (var1 %in% colnames(radiomica_data_quant) && var2 %in% colnames(radiomica_data_quant)) {
    if (var_counts[var1] <= var_counts[var2]) {
      radiomica_data_quant <- radiomica_data_quant[, !colnames(radiomica_data_quant) %in% var1]
    } else {
      radiomica_data_quant <- radiomica_data_quant[, !colnames(radiomica_data_quant) %in% var2]
    }
  }
}

```

```{r}
colorTFGi <- rgb(91, 200, 145, maxColorValue = 300)
my_colors <- colorRampPalette(c("white", colorTFGi))(n = 299)
#cor(radiomica_data_quant)
heatmap(cor(radiomica_data_quant), col = my_colors )
```




```{r}
predict <-  predict(rl, newdata = radiomica_test)

tabla_predict <- data.frame(radiomica_test_id, predict, radiomica_test_resposta)

#plot(x = radiomica_test_resposta, y =predict, xlab = "Valors reals", ylab = "Predicció", main = 
    #   "Comparació de la predicció amb els valors reals", ylim = c(0, 400), xlim = c(0,400), col = colorTFG, pch 
      # =16,
#     col.main = "black")
#abline(a = 0, b = 1, col = "red", lty = 2)


```


## Regressió LASSO


Cream una matriu de les variables predictors i un vector amb la resposta

```{r}
matriz_pred <- radiomica %>% 
  select(-Patient, -OS) %>% 
  as.matrix()

resposta <-radiomica$OS
```

```{r}
set.seed(2024)
train = sample(1:nrow(radiomica), 70)
modelo_lasso <- glmnet(matriz_pred[train, ], resposta[train], alpha = 1)
plot(modelo_lasso, xvar = "lambda", xlab = expression(log(lambda)), ylab = "Coeficients")
plot(modelo_lasso, xvar = "dev")
```

```{r}
cv.out <- cv.glmnet(matriz_pred[train, ], resposta[train], alpha = 1)
plot(cv.out, main = expression("Error quadràtic mitjà - Paràmetre" ~ lambda))
bestlam <- cv.out$lambda.min
lasso.pred <- predict(modelo_lasso, s=bestlam, newx= matriz_pred[-train, ])
#mean((lasso.pred-resposta[-train])^2)
```

Finalment, aconseguim els valors dels coeficients

```{r}
lasso.coef <- predict(modelo_lasso, type = "coefficients", s = bestlam)
lasso.coef
```

## Random forest

```{r}
library(randomForest)
```

```{r}
set.seed(2024)
train = sample(1:nrow(radiomica), 70)
rf.radiomica_data <- randomForest(OS ~. - Patient, data = radiomica, subset = train, mtry = 1)
rf.radiomica_data
yhat <- predict(rf.radiomica_data, newdata = radiomica[-train, ])
clinical.test <- radiomica[-train,]$OS
mean((yhat - radiomica_test_resposta)^2 )
#yhat
```

```{r}
oob.err = double(13)
test.err = double(13)

for (mtry in 1:15){
  fit <- randomForest(OS ~. - Patient, data = radiomica, subset = train, mtry = mtry)
  oob.err[mtry] = fit$mse[600]
  pred =  predict(fit, newdata = radiomica[-train, ])
  test.err[mtry] = with(radiomica[-train,], mean((OS-pred)^2))
  print(mtry)
}

test.err

```

```{r}
# Calculam R^2 de les dades test

r2 = 1 - (sum((radiomica_test_resposta - yhat)^2)) / (sum((radiomica_test_resposta - 
                                                           mean(radiomica_test_resposta))^2))
r2

mse = mean((radiomica_test_resposta - yhat)^2)

mse
```

```{r}
importance(rf.radiomica_data)
```

```{r}
importance_df <- as.data.frame(importance(rf.radiomica_data))

# Afegir noms de columnes per claredat
colnames(importance_df) <- c("IncNodePurity")

# Ordenar les variables per importància decreixent
importance_df$Variable <- rownames(importance_df)
importance_df <- importance_df[order(importance_df$IncNodePurity, decreasing = TRUE), ]

# Gràfica de barres de la importància de les variables
ggplot(importance_df, aes(x = reorder(Variable, IncNodePurity), y = IncNodePurity), col = colorTFG) +
  geom_bar(stat = "identity", fill = colorTFG) +
  coord_flip() +
  xlab("") +
  ylab("Increment de la Puresa del Node (IncNodePurity)") +
  ggtitle("Importància de les Variables en el Model de Random Forest") + 
  theme_minimal()
```

## GAM
